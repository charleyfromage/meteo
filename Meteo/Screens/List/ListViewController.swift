//
//  ListViewController.swift
//  Meteo
//
//  Created by Fromage Charley on 05/10/2019.
//  Copyright (c) 2019 Fromage Charley. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class {
    func displayNavigationBarTitle(viewModel: List.NavigationBar.ViewModel)
    func displayCurrentForecasts(viewModel: List.Forecasts.ViewModel)
}

class ListViewController: UIViewController, ListDisplayLogic, UITableViewAnimation {
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?

    // MARK: Outlets
    @IBOutlet private weak var tableView: UITableView!

    // MARK: Data sources
    var displayedForecasts: [List.Forecasts.ViewModel.DisplayedForecast] = [] {
        didSet {
            DispatchQueue.main.async { [weak self] in
                self?.tableView.reloadData()
                if let tableView = self?.tableView {
                    self?.showTableView(tableView)
                }
            }
        }
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        setupTableView()
        setupNavigationBar()
        fetchCurrentForecasts()
    }

    func setupTableView() {
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "UITableViewCell")
        tableView.delegate = self
        tableView.dataSource = self
    }

    func setupNavigationBar() {
        interactor?.setNavigationBarTitle()
    }

    func fetchCurrentForecasts() {
        hideTableView(tableView)

        let request = List.Forecasts.Request()
        interactor?.fetchCurrentForecasts(request: request)
    }

    func displayNavigationBarTitle(viewModel: List.NavigationBar.ViewModel) {
        title = viewModel.title
    }

    func displayCurrentForecasts(viewModel: List.Forecasts.ViewModel) {
        self.displayedForecasts = viewModel.displayedForecasts
    }
}

extension ListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedForecasts.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath)
        cell.textLabel?.text = displayedForecasts[indexPath.row].description

        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        performSegue(withIdentifier: ListRouter.Routes.pushDetails, sender: self)
    }
}
